{"version":3,"sources":["timeline.js","Add.js","App.js","reportWebVitals.js","index.js"],"names":["Timeline","props","className","console","log","posts","map","current","v","Card","Title","id","username","Body","postText","Footer","likes","Button","onClick","e","updateLikes","likeHandler","variant","Add","useState","state","cState","toastr","options","closeButton","debug","extendedTimeOut","hideDuration","hideEasing","hideMethod","newestOnTop","onclick","positionClass","preventDuplicates","progressBar","showDuration","showEasing","showMethod","timeOut","clear","handleChange","event","newState","target","name","value","Form","onSubmit","newId","preventDefault","length","onsubmit","success","Group","controlId","Label","Control","type","onChange","App","postCards","cPostCards","useEffect","postContents","localStorage","getItem","JSON","parse","setItem","stringify","Navbar","bg","expand","Brand","Toggle","Collapse","Nav","to","Container","exact","path","obj","updatedLikes","c","postCard","updatePostCards","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d9f3994.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.scss\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nfunction Timeline(props) {\r\n  // do something with the post obj passed in\r\n  const likeHandler = (e) => {\r\n    const { id, username, postText, likes } = e;\r\n    props.updateLikes({ id, username, postText, likes: likes + 1 });\r\n  };\r\n\r\n  const buildPosts = () => {\r\n    console.log(props.posts);\r\n    return props.posts.map((current, v) => (\r\n      <Card key={v}>\r\n        <Card.Title id=\"username\">{current.username}</Card.Title>\r\n        <Card.Body>{current.postText}</Card.Body>\r\n        \r\n        <Card.Footer className=\"text-end\">\r\n          This post has {current.likes} likes!\r\n          <Button\r\n            // added onclick, and pass in the current post as an argument\r\n            onClick={() => likeHandler(current)}\r\n            variant=\"primary\"\r\n            id=\"like-button\"\r\n          >\r\n            <Icon.HandThumbsUp /> Like\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"timelineContainer\">{buildPosts()}</div>\r\n    </>\r\n  );\r\n}\r\nexport default Timeline;\r\n","import React, { useState } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nimport toastr from \"toastr\";\r\nimport \"toastr/build/toastr.min.css\";\r\n\r\nfunction Add(props) {\r\n  const [state, cState] = useState({\r\n    id: 0,\r\n    username: \"\",\r\n    postText: \"\",\r\n    likes: 0,\r\n  });\r\n  toastr.options = {\r\n    closeButton: true,\r\n    debug: false,\r\n    extendedTimeOut: \"3000\",\r\n    hideDuration: \"1000\",\r\n    hideEasing: \"linear\",\r\n    hideMethod: \"fadeOut\",\r\n    newestOnTop: false,\r\n    onclick: null,\r\n    positionClass: \"toast-top-full-width\",\r\n    preventDuplicates: true,\r\n    progressBar: true,\r\n    showDuration: \"3000\",\r\n    showEasing: \"swing\",\r\n    showMethod: \"fadeIn\",\r\n    timeOut: \"5000\",\r\n  };\r\n  toastr.clear();\r\n\r\n  const handleChange = (event) => {\r\n    const newState = { ...state };\r\n    newState[event.target.name] = event.target.value;\r\n    cState(newState);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    let newId;\r\n    if (props.posts.length > 0) {\r\n      newId = props.posts[props.posts.length - 1][\"id\"] + 1;\r\n    } else {\r\n      newId = 0;\r\n    }\r\n    \r\n    props.onsubmit(newId, state.username, state.postText, state.likes);\r\n    toastr.success(\"Successfully added post!\");\r\n    cState({\r\n      id: newId,\r\n      username: \"\",\r\n      postText: \"\",\r\n      likes: 0,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group controlId=\"username\">\r\n          <Form.Label>Username</Form.Label>\r\n          <Form.Control\r\n            name=\"username\"\r\n            type=\"text\"\r\n            onChange={(e) => handleChange(e)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"text\">\r\n          <Form.Label>What's happening...?</Form.Label>\r\n          <Form.Control\r\n            name=\"postText\"\r\n            type=\"text\"\r\n            onChange={(e) => handleChange(e)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          <Icon.Pen /> Add Post\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Add;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport \"./App.scss\";\r\nimport Timeline from \"./timeline\";\r\nimport Add from \"./Add\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  // added post ids\r\n  const [postCards, cPostCards] = useState([\r\n    { username: \"Vic\", postText: \"Hello everyone\", likes: 2, id: 0 },\r\n    { username: \"Robert\", postText: \"Hello Vic\", likes: 1, id: 1 },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    //localStorage.removeItem(\"post\");\r\n    const postContents = localStorage.getItem(\"post\");\r\n    cPostCards(JSON.parse(postContents) || []);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"post\", JSON.stringify(postCards));\r\n  }, [postCards]);\r\n\r\n  // do something now that post obj is returned once it has been liked\r\n  const updateLikes = (obj) => {\r\n    const updatedLikes = postCards.map((c) => {\r\n      if (c.id === obj.id) {\r\n        c.likes = c.likes + 1;\r\n      }\r\n      return c;\r\n    });\r\n    cPostCards(updatedLikes);\r\n  };\r\n\r\n  const updatePostCards = (id, username, postText, likes) => {\r\n    const postCard = { id, username, postText, likes };\r\n\r\n    cPostCards(\r\n      (state) => [...state, postCard],\r\n      localStorage.setItem(\"post\", JSON.stringify([...postCards, postCard]))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <Navbar bg=\"primary\" variant=\"dark\" expand=\"md\">\r\n        <Navbar.Brand>NewFace</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Link className=\"nav-link\" to=\"/\">\r\n              Timeline\r\n            </Link>\r\n            <Link className=\"nav-link\" to=\"/add\">\r\n              Add\r\n            </Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n\r\n      <Container>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Timeline posts={postCards} updateLikes={updateLikes} />\r\n          </Route>\r\n          <Route path=\"/add\">\r\n            <Add\r\n              posts={postCards}\r\n              onsubmit={(id, username, postText, likes) =>\r\n                updatePostCards(id, username, postText, likes)\r\n              }\r\n            />\r\n          </Route>\r\n          <Route path=\"/\">Error: 404 not found</Route>\r\n        </Switch>\r\n      </Container>\r\n    </Router>\r\n  );\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}